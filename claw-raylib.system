;;; -*- Mode: LISP; Package: :cl-user; BASE: 10; Syntax: ANSI-Common-Lisp; -*-
;;;
;;;   Time-stamp: <>
;;;   Touched: Sun Jan 14 19:56:00 2024 +0530 <enometh@net.meer>
;;;   Bugs-To: enometh@net.meer
;;;   Status: Experimental.  Do not redistribute
;;;   Copyright (C) 2024 Madhu.  All Rights Reserved.
;;;
(in-package "CL-USER")

(defvar *claw-raylib-source-dir*
  (merge-pathnames "Github/Authors/bohonghuang/claw-raylib/" (translate-logical-pathname "EXTERN:")))
(defvar *claw-raylib-binary-dir* (binary-directory *claw-raylib-source-dir*))

;; define some directory paths used for bindings
(mk:defsystem :claw-raylib/config-madhu
  :source-pathname *claw-raylib-source-dir*
  :binary-pathname *claw-raylib-binary-dir*
  :source-extension "lisp"
  :components ((:file "config-madhu")))

;; define mk-defsystem definitions for bindings
(mk:defsystem :claw-raylib/defsys
  :source-pathname *claw-raylib-source-dir*
  :binary-pathname *claw-raylib-binary-dir*
  :source-extension "lisp"
  :depends-on (#:alexandria
	       #:cffi
	       #:claw-cxx
	       #:claw-raylib/config-madhu)
  :components ((:file "claw-raylib-defsys")))

#||
;; claw-raylib/gen defines the mk-defsystem  programatically.
(cffi:load-foreign-library (merge-pathnames "libraylib.so"
					    *claw-raylib-lib*))
(cffi:load-foreign-library (merge-pathnames "raygui.so"
					    *claw-raylib-lib*))

(mk:oos 'claw-raylib.raylib :load :compile-during-load t)
(mk:oos 'claw-raylib.rlgl :load :compile-during-load t)
(mk:oos 'claw-raylib.raygui :load :compile-during-load t)
||#


;;; define wrappers (& mk-defsystem definitions)
(mk:defsystem :claw-raylib/gen
  :source-pathname *claw-raylib-source-dir*
  :binary-pathname *claw-raylib-binary-dir*
  :source-extension "lisp"
  :depends-on (#:alexandria
	       #:cffi #:claw-cxx
	       #:claw-raylib/config-madhu)
  :components ((:file "claw")))

#+nil
(mk:oos :claw-raylib/gen :load :compile-during-load t)


;;;
(require 'trivial-features)

(mk:defsystem :claw-raylib.defcfun
  :source-pathname *claw-raylib-source-dir*
  :binary-pathname *claw-raylib-binary-dir*
  :source-extension "lisp"
  ;; :defsystem-depends-on (:trivial-features)
  :depends-on (#:alexandria #:cffi #:cffi-ops #:cffi-object #:cffi-object.ops)
  :components ((:file "defcfun")))

#+nil
(mk:oos :claw-raylib.defcfun :load :compile-during-load t)


(mk:defsystem :claw-raylib.library
  :source-pathname *claw-raylib-source-dir*
  :binary-pathname *claw-raylib-binary-dir*
  :source-extension "lisp"
  :depends-on (#:alexandria #:cffi #:claw-raylib/config-madhu)
  :components ((:file "library")))

#+nil
(mk:oos :claw-raylib.library :load :compile-during-load t)

;;;
(mk:defsystem :claw-raylib
  :source-pathname *claw-raylib-source-dir*
  :binary-pathname *claw-raylib-binary-dir*
  :source-extension "lisp"
  :depends-on (#:alexandria #:global-vars
			    #:cffi #:cffi-ops #:cffi-object #:cffi-object.ops
			    #:claw-raylib.defcfun
;;			    #+nil	; load-libraries manually
			    #:claw-raylib.library
			    #:claw-raylib.raylib
			    #:claw-raylib.raygui
			    #:claw-raylib.rlgl
			    )
  :components ((:file "package")
               (:file "object" :depends-on ("package"))
               (:file "macros" :depends-on ("package"))
               (:file "unexport" :depends-on ("package"))
               (:file "reexport" :depends-on ("package" "unexport"))
               (:file "library" :depends-on ("package"))))

#+nil
(mk:oos :claw-raylib :load :compile-during-load t)

(mk:defsystem :claw-raylib/examples
  :source-pathname *claw-raylib-source-dir*
  :binary-pathname *claw-raylib-binary-dir*
  :source-extension "lisp"
  :depends-on (#:alexandria #:claw-raylib #:cffi-ops #:cffi-object #:cffi-object.ops)
  :components
  ((:module "examples"
    :components
    ((:file "package")
               (:module "core"
                :components ((:file "2d-camera")
                             (:file "3d-camera-mode")
                             (:file "3d-picking")
                             (:file "basic-window")
                             (:file "world-screen")))
               (:module "raygui"
                :components ((:file "controls-test-suite")))))))

#+nil
(mk:oos :claw-raylib/examples :load :compile-during-load t)

